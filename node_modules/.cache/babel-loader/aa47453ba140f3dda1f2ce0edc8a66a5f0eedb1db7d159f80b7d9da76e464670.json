{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vladi\\\\Desktop\\\\\\u0420\\u0435\\u0430\\u043A\\u0442 \\u0441 \\u043A\\u043B\\u0430\\u0443\\u0434\\u0438\\u0438\\\\my-app\\\\src\\\\components\\\\Timer\\\\Timer.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button, Typography } from '@mui/material';\nimport { StyleTimer } from '../../assets/styles/components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Timer = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n  const [active, setActive] = useState(false);\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    let interval = null;\n    if (active) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 10);\n      }, 10);\n    } else if (!active && time !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [active, time]);\n  const start = useCallback(() => {\n    setActive(prevState => !prevState);\n  }, []);\n  const reset = useCallback(() => {\n    setTime(0);\n    setActive(false);\n  }, []);\n  const formatTime = useCallback(() => {\n    const getTime = ms => {\n      const minutes = Math.floor(ms / 1000 / 60 % 60);\n      const seconds = Math.floor(ms / 1000 % 60);\n      const milliseconds = ms % 1000;\n      return [minutes, seconds, milliseconds];\n    };\n    const [minutes, seconds, milliseconds] = getTime(time);\n    return `${minutes}:${seconds}:${milliseconds}`;\n  }, [time]);\n  return /*#__PURE__*/_jsxDEV(StyleTimer, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      children: \"Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: formatTime()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"success\",\n      onClick: start,\n      children: active ? 'pause' : 'start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"error\",\n      onClick: reset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}, \"0pgcHvMyV3y+1TM+GSqsixbrAVI=\")), \"0pgcHvMyV3y+1TM+GSqsixbrAVI=\");\n_c2 = Timer;\nexport default Timer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Timer$React.memo\");\n$RefreshReg$(_c2, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Button","Typography","StyleTimer","jsxDEV","_jsxDEV","Timer","_s","memo","_c","active","setActive","time","setTime","interval","setInterval","prevTime","clearInterval","start","prevState","reset","formatTime","getTime","ms","minutes","Math","floor","seconds","milliseconds","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/vladi/Desktop/Реакт с клаудии/my-app/src/components/Timer/Timer.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { Button, Typography } from '@mui/material';\r\nimport { StyleTimer } from '../../assets/styles/components';\r\n\r\nconst Timer: React.FC = React.memo(() => {\r\n    const [active, setActive] = useState(false);\r\n    const [time, setTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        let interval: any = null;\r\n        if (active) {\r\n            interval = setInterval(() => {\r\n                setTime(prevTime => prevTime + 10);\r\n            }, 10);\r\n        } else if (!active && time !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [active, time]);\r\n\r\n    const start = useCallback(() => {\r\n        setActive(prevState => !prevState);\r\n    }, []);\r\n\r\n    const reset = useCallback(() => {\r\n        setTime(0);\r\n        setActive(false);\r\n    }, []);\r\n\r\n    const formatTime = useCallback(() => {\r\n        const getTime = (ms: number) => {\r\n            const minutes = Math.floor((ms / 1000 / 60) % 60);\r\n            const seconds = Math.floor((ms / 1000) % 60);\r\n            const milliseconds = ms % 1000;\r\n            return [minutes, seconds, milliseconds];\r\n        };\r\n\r\n        const [minutes, seconds, milliseconds] = getTime(time);\r\n\r\n        return `${minutes}:${seconds}:${milliseconds}`;\r\n    }, [time]);\r\n\r\n    return (\r\n        <StyleTimer>\r\n            <Typography variant='h3'>Timer</Typography>\r\n            <Typography variant='h4'>{formatTime()}</Typography>\r\n            <Button variant='contained' color='success' onClick={start}>\r\n                {active ? 'pause' : 'start'}\r\n            </Button>\r\n            <Button variant='contained' color='error' onClick={reset}>\r\n                Reset\r\n            </Button>\r\n            <hr></hr>\r\n        </StyleTimer>\r\n    );\r\n});\r\n\r\nexport default Timer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}